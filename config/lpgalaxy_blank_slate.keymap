/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MACRO_PLACEHOLDER 0

#define BASE_EN 0
#define SHIFT_EN 1
#define BASE_RU 2
#define SHIFT_RU 3
#define FNL 4
#define FNR 5
#define FNG 6

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
         zmk,matrix_transform = &ortho_transform;
    };

    macros {
        ZMK_MACRO(
            thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )

        sh: sh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <1>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>
                , <&macro_release &kp LSHFT>
                ;
        }
    };
    
    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_en_layer {
            label = "Base EN";
            bindings = <
 &kp Q      &kp W         &kp E      &kp R       &kp T          &kp LPAR       &kp RPAR         &kp Y          &kp U       &kp I      &kp O         &kp P
 &kp A      &kp S         &kp D      &kp F       &kp G          &kp LBRC       &kp RBRC         &kp H          &kp J       &kp K      &kp L         &kp DQT
 &kp Z      &kp X         &kp C      &kp V       &kp B          &kp COLON      &kp SEMI         &kp N          &kp M       &kp GRAVE  &kp UP        &bootloader // temporary, p. should be &kp ESC
 &kp LCTRL  &mo SHIFT_EN  &kp LALT   &kp ENTER   &mo FNL        &kp CAPS       &kp SPACE        &mo FNR        &kp BACK    &kp LEFT   &kp DOWN      &kp RIGHT
            >;
        };

        shifted_en_layer {
            label = "Shifted EN";
            bindings = <
 &sh Q      &sh W      &sh E      &sh R       &sh T          &kp LT         &kp GT         &sh Y          &sh U       &sh I      &sh O         &sh P
 &sh A      &sh S      &sh D      &sh F       &sh G          &kp LBKT       &kp RBKT       &sh H          &sh J       &sh K      &sh L         &kp DQT
 &sh Z      &sh X      &sh C      &sh V       &sh B          &kp SLASH      &kp BACKSLASH  &sh N          &sh M       &kp TILDE  &sh UP        &bootloader // temporary, p. should be &sh ESC
 &kp LCTRL  &none      &sh LGUI   &sh LALT    &mo NAV_L      &kp AMPS       &kp STAR       &mo NUM_L      &kp DEL     &sh UP     &sh DOWN      &sh RIGHT
            >;
        };

        base_ru_layer {
            label = "Base RU";
            bindings = <
 &kp Q      &kp W         &kp E      &kp R       &kp T          &kp LPAR       &kp RPAR         &kp Y          &kp U       &kp I      &kp O         &kp P
 &kp A      &kp S         &kp D      &kp F       &kp G          &kp LBRC       &kp RBRC         &kp H          &kp J       &kp K      &kp L         &kp DQT
 &kp Z      &kp X         &kp C      &kp V       &kp B          &kp COLON      &kp SEMI         &kp N          &kp M       &kp GRAVE  &kp UP        &bootloader // temporary, p. should be &kp ESC
 &kp LCTRL  &mo SHIFT_EN  &kp LALT   &kp ENTER   &mo FNL        &kp CAPS       &kp SPACE        &mo FNR        &kp BACK    &kp LEFT   &kp DOWN      &kp RIGHT
            >;
        };

        shifted_ru_layer {
            label = "Shifted RU";
            bindings = <
 &sh Q      &sh W      &sh E      &sh R       &sh T          &kp LT         &kp GT         &sh Y          &sh U       &sh I      &sh O         &sh P
 &sh A      &sh S      &sh D      &sh F       &sh G          &kp LBKT       &kp RBKT       &sh H          &sh J       &sh K      &sh L         &kp DQT
 &sh Z      &sh X      &sh C      &sh V       &sh B          &kp SLASH      &kp BACKSLASH  &sh N          &sh M       &kp TILDE  &sh UP        &bootloader // temporary, p. should be &sh ESC
 &kp LCTRL  &none      &sh LGUI   &sh LALT    &mo NAV_L      &kp AMPS       &kp STAR       &mo NUM_L      &kp DEL     &sh UP     &sh DOWN      &sh RIGHT
            >;
        };

        left_function_layer {
            label = "Left Function";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
            >;
        };

        right_function_layer {
            label = "Right Function";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
            >;
        };

        gaming_switch_layer {
            label = "Gaming Switch Layer";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
            >;
        };


    };
};

