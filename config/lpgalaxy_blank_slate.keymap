/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MACRO_PLACEHOLDER 0

#define BASE_EN 0
#define SHIFT_EN 1
#define BASE_RU 2
#define SHIFT_RU 3
#define FNL_EN 4
#define FNL_RU 5
#define FNR_EN 6
#define FNR_RU 7
#define FNG 8

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
         zmk,matrix_transform = &ortho_transform;
    };

    macros {
        ZMK_MACRO(
            thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )
    };
    
    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_en_layer {
            label = "Base EN";
            bindings = <
 &kp Q      &kp W         &kp E      &kp R       &kp T          &kp LPAR       &kp RPAR         &kp Y          &kp U       &kp I      &kp O         &kp P
 &kp A      &kp S         &kp D      &kp F       &kp G          &kp LBRC       &kp RBRC         &kp H          &kp J       &kp K      &kp L         &kp DQT
 &kp Z      &kp X         &kp C      &kp V       &kp B          &kp COLON      &kp SEMI         &kp N          &kp M       &kp GRAVE  &kp UP        &kp ESC
 &kp LCTRL  &mo SHIFT_EN  &kp LALT   &kp ENTER   &mo FNL_EN     &kp CAPS       &kp SPACE        &mo FNR_EN     &kp BSPC    &kp LEFT   &kp DOWN      &kp RIGHT
            >;
        };

        shifted_en_layer {
            label = "Shifted EN";
            bindings = <
 &kp LS(Q)  &kp LS(W)  &kp LS(E)    &kp LS(R)    &kp LS(T)      &kp LT         &kp GT         &kp LS(Y)      &kp LS(U)   &kp LS(I)    &kp LS(O)     &kp LS(P)
 &kp LS(A)  &kp LS(S)  &kp LS(D)    &kp LS(F)    &kp LS(G)      &kp LBKT       &kp RBKT       &kp LS(H)      &kp LS(J)   &kp LS(K)    &kp LS(L)     &kp SQT
 &kp LS(Z)  &kp LS(X)  &kp LS(C)    &kp LS(V)    &kp LS(B)      &kp SLASH      &kp BACKSLASH  &kp LS(N)      &kp LS(M)   &kp TILDE    &kp LS(UP)    &bootloader // temporary
 &kp LCTRL  &none      &kp LS(LGUI) &kp LS(LALT) &mo FNL_EN     &kp AMPS       &kp STAR       &mo FNR_EN     &kp DEL     &kp LS(LEFT) &kp LS(DOWN)  &kp LS(RIGHT)
            >;
        };

        base_ru_layer {
            label = "Base RU";
            bindings = <
 &kp Q      &kp W         &kp E      &kp R       &kp T          &kp LPAR       &kp RPAR         &kp Y          &kp U       &kp I      &kp O         &kp P
 &kp A      &kp S         &kp D      &kp F       &kp G          &kp LBRC       &kp RBRC         &kp H          &kp J       &kp K      &kp L         &kp DQT
 &kp Z      &kp X         &kp C      &kp V       &kp B          &kp COLON      &kp SEMI         &kp N          &kp M       &kp GRAVE  &kp UP        &bootloader
 &kp LCTRL  &mo SHIFT_EN  &kp LALT   &kp ENTER   &mo FNL_RU     &kp CAPS       &kp SPACE        &mo FNR_RU     &kp BSPC    &kp LEFT   &kp DOWN      &kp RIGHT
            >;
        };

        shifted_ru_layer {
            label = "Shifted RU";
            bindings = <
 &kp LS(Q)  &kp LS(W)  &kp LS(E)    &kp LS(R)    &kp LS(T)      &kp LT         &kp GT         &kp LS(Y)      &kp LS(U)   &kp LS(I)    &kp LS(O)     &kp LS(P)
 &kp LS(A)  &kp LS(S)  &kp LS(D)    &kp LS(F)    &kp LS(G)      &kp LBKT       &kp RBKT       &kp LS(H)      &kp LS(J)   &kp LS(K)    &kp LS(L)     &kp SQT
 &kp LS(Z)  &kp LS(X)  &kp LS(C)    &kp LS(V)    &kp LS(B)      &kp SLASH      &kp BACKSLASH  &kp LS(N)      &kp LS(M)   &kp TILDE    &kp LS(UP)    &bootloader
 &kp LCTRL  &none      &kp LS(LGUI) &kp LS(LALT) &mo FNL_RU     &kp AMPS       &kp STAR       &mo FNR_RU     &kp DEL     &kp LS(LEFT) &kp LS(DOWN)  &kp LS(RIGHT)
            >;
        };

        left_function_en_layer {
            label = "Left Function [EN]";
            bindings = <
&none      &none      &kp HASH       &kp DOLLAR   &kp F1     &kp F2     &kp F3     &kp F4     &kp N1     &kp N2     &kp N3     &kp N4
&none      &none      &kp CARET      &kp PERCENT  &kp F5     &kp F6     &kp F7     &kp F8     &kp N5     &kp N6     &kp N7     &kp N8
&none      &none      &kp C_VOL_DOWN &kp C_VOL_UP &kp F9     &kp F10    &kp F11    &kp F12    &kp N9     &kp N0     &kp HOME   &kp PG_UP
&none      &none      &none          &kp C_MUTE   &none      &none      &none      &none      &kp MINUS  &kp PLUS   &kp END    &kp PG_DOWN
            >;
        };

        left_function_ru_layer {
            label = "Left Function [RU]";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
            >;
        };

        right_function_en_layer {
            label = "Right Function [EN]";
            bindings = <
&none      &none      &none      &none      &kp F1     &kp F2     &kp F3     &kp F4     &kp AT     &none        &none     &bootloader
&none      &none      &none      &none      &kp F5     &kp F6     &kp F7     &kp F8     &kp UNDER  &kp PIPE     &none     &none
&none      &none      &none      &none      &kp F9     &kp F10    &kp F11    &kp F12    &kp COMMA  &kp DOT      &kp QMARK &none
&none      &none      &none      &none      &none      &none      &none      &none      &kp DEL    &kp EQUAL    &kp EXCL  &none
            >;
        };

        right_function_ru_layer {
            label = "Right Function [RU]";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
            >;
        };

        gaming_switch_layer {
            label = "Gaming Switch Layer";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none      &none
            >;
        };
    };
};

